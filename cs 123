# Quiz Notes

## Arrays (page 380)

One Dimensional Array

```c++
int main()
{
    int total = 0;
    double avg;
    int grades [NUM_GRADES];
    int index;

    for (index = 0; index < NUM_GRADES; ++index)
    {
        cout << "Enter your grade: ";
        cin >> grade[index];
    }

    return 0;
}
```

Two Dimensional Array (page 426)
    stores rows and columns of data
    <data type> <id> [rows] [columns]

```c++

int hours[4][6];

int row; int col;

for (row=0; row<4;++row)
{
    for (col=0; col<6; ++col)
    {
        cout << setw(4) << hours [row][col];
    }
    cout << endl;
}

```

## Character I/O 
    input streams can read a single char with a "get" member function

```c++
int main()
{
    char myChar;
    inFile.get(myChar); //reads one character
    cin.get(myChar);
    cout << myChar;
    outfile.put(myChar); //writes one character
    cout.put(myChar)
}
```


## Character Arrays(page 455)
    can initalize with string
    
```c++
int main()
{
    char charBuff[13] = "Hello there!";

    int index;
    for(index = 0; index < 13; ++index)
    {
        cout << charBuff[index] << endl;
    }



    cin.getline(charBuff,256); // reads up to \n
}
```

c-string functions
strlen(asdf)            returns length of asdf
strcat(target,asdf)     adds asdf to target
strcmp(1,2)             returns 0 if same, returns < 0 if 1 < 2, returns > 0 if 1 > 2
strcpy(target,asdf)     copies asdf into target




## Structures (pg 544)

```c++
struct Date
{
    int month;
    int day;
    int year;
};

Date CalcNextDay (Date dateVal)

int main()
{
    Date myDate;
    myDate.month = 10;
    myDate.day = 23;
    myDate.year = 2021;
}

Date CalcNextDate(Date dateVal)
{
    return dateVal;
}
```

Structure Initialization (pg 553)

```c++
int main()
{
    Car myCar = {"Tesla", "Model Y", 125};
}
```

Array of Structures (pg 662)

```c++
int main()
{
    Date bdays[25];
}
```




## Switch Statements (pg 128)

```c++
char grade;
cin >> grade;
switch (grade)
{
    case 'A':
        cout << "excellent";
        break;
    case 'B' :
        cout << "good";
        break;
    default:
        cout << "error";

}




# Lecture 38

## Using two or more files (multiple modules)

```c++
Date.h // <== "header file
struct Date
{
    int month;
    int day;
    int year;
};

void GetDate(Date &dateRef);
void DisplayDate(Date &dateRef);

//contains information for the compiler
// no memory is allocated
```

Date.h header file is the #included file at the start of the Date.cpp program


```c++
Date.cpp

#include<iostream>
#include< "Date.h" //reference to the header file
using namespace std;

//Get date from input
void GetDate(Date &dateRef)
{
    cout << "Enter month";
    cin >> dateref.month;

    cout << "Enter day";
    cin >> dateRef.day;

    cout << "Enter year:";
    cin >> dateRef.year;
}

void DisplayDate(Date &dateRef)
{
    cout << "Date is "
        << dateRef.month << '/'
        << dateRef.day <<'/'
        << dateRef.year << endl;
}

```

```c++
main.cpp

#include <iostream>
#include "Date.h"
using namespace std;

int main()
{
    Date myDate;
    
    GetDate(myDate);

    DisplayDate(myDate);

    return 0;
}

```


To compile:
    g++ -Wall -g main.cpp Date.cpp
    ./a.out
    
    g++ Wall -g *cpp //gets all the files to compile that has cpp






# Lecture 38.5

tip:    split ex.cpp //in micro to get both files in the screen
        ctrl b  //takes you back to terminal without closing files aka control back

# Lecture 39

## ADT: Abstract Data Type (pg. 590)

    An ADT is an object that cointains data AND the function to manipulate that data

```c++
Date.h 

struct Date //package that includes everything inside like a gym pass
{
    //"Data Members"
    int month;
    int day;
    int year;

    //"Member Functions"
    void GetDate(void);
    void DisplayDate(void);

};

Note: Member functions have direct access to the data members of the calling object

```

```c++
Date.cpp

#include <iostream>
#include "Date.h"
using namespace.std;

void Date::GetDate(void) // :: -> scope resolution operator
{
    cout << "Enter month:";
    cin >> month;

    cout << "Enter day:";
    cin >> day;

    cout << "Enter year:";
    cin >> year;
}

void Date::DisplayDate(void)
{
    cout << "Date is "
        << month << '/'
        << day << '/'
        << year << endl;
}

```

```c++
main.cpp

#include <iostream>
#include "Date.h"
using namespace std;

int main()
{
    Date myDate;

    myDate.GetDate();

    myDate.DisplayDate();

    Date yourDate;

}
